// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/repositories": {
            "post": {
                "description": "Adds a new GitHub repository to be monitored",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Add a repository to monitor",
                "parameters": [
                    {
                        "description": "Repository to Add",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Repository already monitored",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to sync repository",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repositories/{owner}/{name}/commits": {
            "get": {
                "description": "List commits for a repository (supports filtering \u0026 pagination)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commits"
                ],
                "summary": "Get Commits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository Owner",
                        "name": "owner",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 30,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "until",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Commit"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repositories/{owner}/{name}/monitor": {
            "post": {
                "description": "Starts monitoring repository for new data since a given date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Monitor Repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository Owner",
                        "name": "owner",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Start date",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repositories/{owner}/{name}/reset-collection": {
            "post": {
                "description": "Deletes and reloads repo data from GitHub starting from a given date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Reset Repository Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository Owner",
                        "name": "owner",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Start date",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repositories/{owner}/{name}/top-authors": {
            "get": {
                "description": "Fetch top commit authors by number of commits",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get Top Authors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository Owner",
                        "name": "owner",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Max authors to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AuthorCommitCount"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repositories/{owner}/{repo}": {
            "get": {
                "description": "Fetch repository metadata from DB",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository"
                ],
                "summary": "Get Repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository Owner",
                        "name": "owner",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository Name",
                        "name": "repo",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Repository"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AddRepositoryRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "models.AuthorCommitCount": {
            "type": "object",
            "properties": {
                "author_name": {
                    "type": "string"
                },
                "commit_count": {
                    "type": "integer"
                }
            }
        },
        "models.Commit": {
            "type": "object",
            "properties": {
                "author_date": {
                    "type": "string"
                },
                "author_email": {
                    "type": "string"
                },
                "author_name": {
                    "type": "string"
                },
                "commit_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "repository_id": {
                    "type": "integer"
                },
                "sha": {
                    "type": "string"
                }
            }
        },
        "models.DateRequest": {
            "type": "object",
            "properties": {
                "since": {
                    "type": "string"
                }
            }
        },
        "models.Repository": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "forks_count": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "language": {
                    "type": "string"
                },
                "last_commit_fetched_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "open_issues_count": {
                    "type": "integer"
                },
                "stars_count": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "watchers_count": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "GitHub Monitory Service",
	Description:      "A Go service that monitors GitHub repositories, tracks commits, and stores data in a persistent database.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
